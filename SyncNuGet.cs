using System;using System.Linq;using System.Xml;using System.Xml.Linq;using System.Xml.XPath;public static class Program {  static void Main(string[] args) {	var packages = ReadPackages(args[0]);	var nuspec = ReadNuSpec(args[1]);	Fix(packages, nuspec, args[1]);}static void Fix(PackageInfo[] config, PackageInfo[] nuspec, string output) {	foreach (var cfgProject in config) {		var nsProjects = nuspec.Where(p => p.Id == cfgProject.Id).ToList();		if (nsProjects.Count > 0) {			Console.WriteLine(cfgProject.Id + " is in both nuspec and config");			var nsProject = nsProjects[0];			if (cfgProject.Version != nsProject.Version) {				Console.WriteLine("\tDifferent versions: {0} [C] vs {1} [N]", cfgProject.Version, nsProject.Version);				nsProjects.ForEach(c => c.Version = cfgProject.Version);				Console.WriteLine("\t\tUpdated version: {0} [C]", cfgProject.Version);			} else {				Console.WriteLine("\tSame version: {0} [C/N]", cfgProject.Version);			}		} else {			Console.WriteLine(cfgProject.Id + " isn't in both nuspec and config");		}		Console.WriteLine();	}	var doc = XDocument.Load(output);	foreach (var n in nuspec) {		foreach (var x in doc.XPathSelectElements(string.Format("//*[local-name()='dependency' and @id = '{0}' and @version != '{1}']", n.Id, n.Version.ToString())))			x.Attribute("version").Value = n.Version.ToString();	}}static PackageInfo[] ReadNuSpec(string path) {	var doc = XDocument.Load(path);	var metadata = doc.Root.Element("{http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd}metadata");	var deps = metadata.Element("{http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd}dependencies");	var groups = deps.Elements("{http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd}group");	return groups.SelectMany(n => n.Elements("{http://schemas.microsoft.com/packaging/2012/06/nuspec.xsd}dependency"), (n, m) => new PackageInfo {		Framework = GetFrameworks(n.Attribute("targetFramework") == null ? "" : n.Attribute("targetFramework").Value),		Id = m.Attribute("id").Value.Trim(),		Version = Version.Parse(m.Attribute("version").Value)	}).ToArray();}static PackageInfo[] ReadPackages(string path) {	var doc = XDocument.Load(path);	var packages = doc.Root.Elements("package");	return packages.Select(n => new PackageInfo {		Id = n.Attribute("id").Value.Trim(),		Version = Version.Parse(n.Attribute("version").Value),		Framework = GetFrameworks(n.Attribute("targetFramework").Value),		Development = n.Attribute("developmentDependency") == null ? false : bool.Parse(n.Attribute("developmentDependency").Value),	}).ToArray();}static string[] GetFrameworks(string framework) {	if (string.IsNullOrEmpty(framework))		return new string[0];	var frameworks = new[] { framework };	if (framework.StartsWith("portable-")) {		var str = framework.Replace("portable-", "");		frameworks = str.Split('+');	}	for (int i = 0; i < frameworks.Length; i++) {		var f = frameworks[i];		if (f.Equals("Xamarin.iOS10", StringComparison.InvariantCultureIgnoreCase))			frameworks[i] = "xamarinios10";	}	return frameworks.Distinct().ToArray();}class PackageInfo {	public string Id { get; set; }	public Version Version { get; set; }	public string[] Framework { get; set; }	public bool Development { get; set; }}}